#parse("header.vm")
<body>
<div class="container">
    <div class="alert alert-danger hidden" role="alert" id="errorBox">
        #springMessageText("error.email.taken", "Email is already taken")
    </div>
    <form class="form-signin" method="post">
        <h2 class="form-signin-heading">#springMessageText("signup","Sign up")</h2>

        <label for="inputName" class="sr-only">#springMessageText("name", "Name") </label>
        <input type="text" id="inputName" name="name" class="form-control" placeholder=#springMessageText("name", "Name") required autofocus="1">

        <label for="inputEmail" class="sr-only">#springMessageText("email", "Email")</label>
        <input type="email" id="inputEmail" name="email" class="form-control" placeholder=#springMessageText("email", "Email") required="">

        <label for="inputPassword" class="sr-only">#springMessageText("password", "Password")</label>
        <input type="password" id="inputPassword" name="password" class="form-control" placeholder=#springMessageText("password", "Password") required="">

        <button class="btn btn-lg btn-primary btn-block" type="submit" id="btnRegister">#springMessageText("register", "Register")</button>
    </form>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.5/socket.io.min.js"></script>
<script type="text/javascript">
    $(document).ready(function() {
        var btnRegister = $("#btnRegister");
        function setFormInvalid(bInvalid) {
            if (bInvalid) {
                btnRegister.prop("disabled", "disabled");
            }else{
                btnRegister.prop("disabled", null);
            }
        }

        var errorBox = $("#errorBox");
        function showError(error) {
            errorBox.removeClass('hidden');
            errorBox.text(error);
        }

        function hideError() {
            errorBox.addClass('hidden');
        }

        var socket = io("http://localhost:8081/");
        socket.on("email", function(data) {
            setFormInvalid(data);
            if (data) {
                showError(#springMessageText("error.email.taken", "Email is already taken"));
                return;
            }
            validatePassword();
        });

        var inputEmail = $("#inputEmail");
        inputEmail.on('input', function () {
            validateEmail();
        })

        var inputPassword = $("#inputPassword");
        inputPassword.on('input', function() {
            validatePassword();
        });

        function validate() {
            validatePassword();
            validateEmail();
        }

        function validateEmail() {
            socket.emit('emailCheck', inputEmail.val());
        }

        function validatePassword() {
            var pass = inputPassword.val();
            if (pass.indexOf(' ') != -1) {
                setFormInvalid(true);
                showError(#springMessageText("error.password.characters", "Password can't contain any of the following characters: ' '");
                return;
            }
            if (pass.length < 6) {
                setFormInvalid(true);
                showError(#springMessageText("error.password.length", "Invalid password, minimal length must be at least 6 characters");
                return;
            }
            setFormInvalid(false);
            hideError();
            validateEmail();
        }
        validate();
    });
</script>
#parse("footer.vm")